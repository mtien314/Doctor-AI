import streamlit as st
import google.generativeai as genai
from langchain_community.vectorstores import Chroma
from langchain_core.prompts import PromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.document_loaders.csv_loader import CSVLoader
from langchain.chains.question_answering import load_qa_chain


def display(vector_index, chunks): 
    st.secrets["GOOGLE_API_KEY"]
   
    genai.configure(api_key=GOOGLE_API_KEY)
    llm = ChatGoogleGenerativeAI(model="gemini-pro",google_api_key=GOOGLE_API_KEY)

    if "messages" not in st.session_state.keys(): # Initialize the chat message history
        st.session_state.messages = [
            {"role": "assistant", "content": "Xin ch√†o ! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n üßë‚Äç‚öïÔ∏è ?."}
        ]
    
    if "question_count" not in st.session_state:  # Initialize the question count
        st.session_state.question_count = 0

    if question := st.chat_input("Your question"): # Prompt for user input and save to chat history
        st.session_state.messages.append({"role": "user", "content": question})
        st.session_state.question_count += 1 
        
    for message in st.session_state.messages: # Display the prior chat messages
        with st.chat_message(message["role"]):
            st.write(message["content"])  
    
    if st.session_state.messages[-1]["role"] != "assistant":    
        with st.chat_message("assistant"):
            with st.spinner("Thinking..."):

                
                if  st.session_state.question_count <=5  :
                    prompt_template = """
                    Giao ti·∫øp nh∆∞ 1 ng∆∞·ªùi b·∫°n.
                    B·∫°n l√† 1 b√°c sƒ© online.
                    T∆∞ v·∫•n b·ªánh cho b·ªánh nh√¢n.
                    K√™ ƒë∆°n thu·ªëc kh√°ng sinh cho b·ªánh nh√¢n v√† ƒë∆∞a ra l·ªùi khuy√™n.
                    ƒê·ªÅ xu·∫•t ƒëi kh√°m b√°c sƒ© ho·∫∑c ƒëi b·ªánh vi·ªán n·∫øu b·ªánh n·∫∑ng.
                    ƒê·ªÅ xu·∫•t danh s√°ch c√°c b√°c sƒ© li√™n quan ƒë·∫øn b·ªánh c√≥ trong d·ªØ li·ªáu.
                    N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn y t·∫ø, b·ªánh h√£y tr·∫£ l·ªùi:
                    "Xin l·ªói, t√¥i ch·ªâ l√† 1 chuy√™n gia t∆∞ v·∫•n s·ª©c kh·ªèe online."
                    Context:\n {context}?\n
                    Question: \n {question}\n
                    Answer:
                    """
                    context = vector_index.similarity_search(question, k=3) 
                    prompt = PromptTemplate(template = prompt_template, input_variables = ["", "question"])
                    model = ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest",google_api_key = GOOGLE_API_KEY, temperature=0.3)
                    chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)
                    response = chain({"input_documents": chunks, "question": question}, return_only_outputs=True)
                    st.write(response["output_text"])
                    message = {"role": "assistant", "content": response["output_text"]}
                    st.session_state.messages.append(message) # Add response to message history

                else:
                   
                    st.write("B·∫°n vui l√≤ng thanh to√°n ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ti·∫øp.")
                   
                    st.write("Link thanh to√°n: https://buy.stripe.com/test_fZecPd1H73zz7jqfYZ")
                    st.write("L∆∞u √Ω: t·ª´ c√¢u h·ªèi th·ª© 5, ph√≠ 50k/c√¢u. T·ª´ c√¢u th·ª© 10, ph√≠ 100k/ c√¢u")
                    st.write("B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c n·ªØa kh√¥ng ?")
                    col_1,col_2 = st.columns(2)
                    k = 0
                    with col_1:
                        y = st.button("Yes")
                        if y==True:
                            k = 1

                            
                    with col_2:
                        n = st.button("No")
                        if n==True:
                            k = 2
                    if k==1:
                        st.write("Th·∫≠t tuy·ªát !!....")
                        st.session_state.question_count = 0
                        st.empty() 
                    if k==2:
                        st.write("C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i !!")
                           
                    


