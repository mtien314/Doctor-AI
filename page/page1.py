import numpy as np
import streamlit as st 
from streamlit_navigation_bar import st_navbar
import pandas as pd
from time import sleep
import bcrypt
from record import update_user,update_account,connect_sql,update_historylogs,update_appoinment2,cancel_appointment
from check import connect
from chat import display
from langchain_community.vectorstores import Chroma
from langchain_core.prompts import PromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.document_loaders.csv_loader import CSVLoader
from booking_page import appointment
from search import search_drugs
import sqlite3
import datetime

st.set_page_config(page_title="Use", page_icon="üë®‚Äçüî¨",layout="wide")

page2 = st_navbar(['Home','Chat','Search','Appointment','Profile','Logout'])

result = connect(table = 'user')
df = pd.DataFrame(result, columns =['ID','Email','Password','Use'])

n = len(df['ID'])   
name = ''
age = ''
phone = ''
id = ''
email = ''

if n!=0:
    passw = df['Password'][n-1]
    email = df['Email'][n-1]
    id = df['ID'][n-1]

if n == 0 or passw == '0':
    placeholder = st.empty()
     
    with placeholder.form("Change password"):
        st.markdown("### Update information")
        name = st.text_input(r"$\textsf{\normalsize Name}$:red[$\textsf{\normalsize *}$]", type ="default")
        age = st.text_input(r"$\textsf{\normalsize Age}$:red[$\textsf{\normalsize *}$]",type="default")
        phone = st.text_input(r"$\textsf{\normalsize Phone}$:red[$\textsf{\normalsize *}$]",type="default")
        gender = st.radio("Gender",("Male", "Female", "Prefer Not To Say"))
        new_pass = st.text_input(r"$\textsf{\normalsize Enter password}$:red[$\textsf{\normalsize *}$]", type = "password")
        password = st.text_input(r"$\textsf{\normalsize Enter password again}$:red[$\textsf{\normalsize *}$]", type = "password")
        submit = st.form_submit_button("submit")

        hash_passw = bcrypt.hashpw(password.encode(), bcrypt.gensalt())

    if submit:

        if new_pass != password or name =="" or age =="" or password =="":
            st.warning("Please check new_pass and pass again")
        else:
            st.success("Change password success")
            sleep(0.5)
            update_user(hash_passw)
      
            update_account(id, name, age, email, phone)
            placeholder.empty()



@st.cache_resource
def load_data3():
    loader = CSVLoader(file_path="D:/Users/User/Downloads/PHOÃÄNG KHAÃÅM CHUYEÃÇN GIA- BEÃ£ÃÇNH VIEÃ£ÃÇN CHOÃõÃ£ RAÃÇÃÉY.csv",encoding="utf8")
    data = loader.load()
    
    splitter = RecursiveCharacterTextSplitter(chunk_size=2000, chunk_overlap=0)

    chunks = splitter.split_documents(data)
    
    embeddings = HuggingFaceEmbeddings()
   
    vector_index = Chroma.from_documents(chunks,embeddings)
    print("Loading data success..")

    return vector_index, chunks

vector_index,chunks = load_data3()

if page2 == 'Home':
            
    if passw !='0' and passw !="":
        st.header("Doctor AI - Tr·ª£ L√Ω S·ª©c Kh·ªèe C√° Nh√¢n C·ªßa B·∫°n")
        st.image("D:/Users/User/Downloads/chatbot.jpg",output_format="auto")
        st.write("M√¥ T·∫£: ƒê∆∞a s·ª©c kh·ªèe c·ªßa b·∫°n v√†o tay c·ªßa c√¥ng ngh·ªá v·ªõi Doctor AI - chatbot y t·∫ø ti√™n ti·∫øn nh·∫•t, h·ªó tr·ª£ b·∫°n t·ª´ vi·ªác ch·∫©n ƒëo√°n ban ƒë·∫ßu ƒë·∫øn qu·∫£n l√Ω b·ªánh m√£n t√≠nh.")
        st.header("Doctor AI l√† g√¨?")
        st.write("Doctor AI l√† m·ªôt chatbot y t·∫ø th√¥ng minh, ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ cung c·∫•p cho b·∫°n c√°c l·ªùi khuy√™n y t·∫ø ch√≠nh x√°c v√† k·ªãp th·ªùi. V·ªõi s·ª± h·ªó tr·ª£ c·ªßa c√¥ng ngh·ªá AI ti√™n ti·∫øn, Doctor AI c√≥ kh·∫£ nƒÉng ch·∫©n ƒëo√°n c√°c tri·ªáu ch·ª©ng ban ƒë·∫ßu, cung c·∫•p th√¥ng tin v·ªÅ c√°c b·ªánh l√Ω v√† gi√∫p qu·∫£n l√Ω c√°c b·ªánh m√£n t√≠nh.")
        st.image("D:/Users/User/Downloads/chatbot2.py")
        st.header("Nh·ªØng T√≠nh NƒÉng N·ªïi B·∫≠t c·ªßa Doctor AI")
        st.write("+ Ch·∫©n ƒêo√°n Ban ƒê·∫ßu: Ph√¢n t√≠ch c√°c tri·ªáu ch·ª©ng v√† ƒë∆∞a ra c√°c d·ª± ƒëo√°n v·ªÅ b·ªánh l√Ω c√≥ th·ªÉ m·∫Øc ph·∫£i.")
        st.write("+ Th√¥ng Tin Y Khoa ƒê·∫ßy ƒê·ªß: Cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ c√°c b·ªánh l√Ω, thu·ªëc v√† ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã.")
        st.header("Doctor AI Ho·∫°t ƒê·ªông Nh∆∞ Th·∫ø N√†o?")
        st.write("Doctor AI s·ª≠ d·ª•ng c√¥ng ngh·ªá AI ti√™n ti·∫øn ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu y t·∫ø t·ª´ ng∆∞·ªùi d√πng. B·∫°n ch·ªâ c·∫ßn nh·∫≠p c√°c tri·ªáu ch·ª©ng ho·∫∑c c√¢u h·ªèi c·ªßa m√¨nh, Doctor AI s·∫Ω ph√¢n t√≠ch v√† cung c·∫•p c√¢u tr·∫£ l·ªùi ch√≠nh x√°c nh·∫•t.")
        st.header("Contact")
        st.write("B√°c sƒ© online")
        st.write("Email: lapduanviet@gmail.com")
        st.write("Phone: 0918755356")

elif page2 == "Chat":
    if passw !='0' and passw !="":
        display(vector_index, chunks)
    else:
        st.warning("Please update your information")

elif page2 =="Logout":
    st.session_state.clear()
    st.switch_page("main.py")

elif page2 =="Profile":
    st.title("Th√¥ng tin c√° nh√¢n")
    
    if passw !='0' and passw !="":
        conn = connect_sql()
        cursor = conn.cursor()
        account = cursor.execute("SELECT * FROM account")
        result = cursor.fetchall()
        df = pd.DataFrame(result, columns = ['ID','Name','Age','Email','Phone'])
        n = len(df['ID'])

        Name = ''
        Age = ''
        Email = ''
        Phone = ''
        ID = ''
        if n!=0:
            ID = df['ID'][n-1]
            Age = df['Age'][n-1]
            Email = df['Email'][n-1]
            Phone = df['Phone'][n-1]
            Name = df['Name'][n-1]

        if passw !='0' and passw !="":
        
            col1, col2 = st.columns(2)

            with col1:
                img = "D:/Users/User/Downloads/Unknown_person.jpg"
                st.image(img, width= 250)
            with col2: 
                st.write(f"üìùT√™n: {Name}")
                st.write(f"üìúTu·ªïi: {Age}")
                st.write(f"üìß Email: {Email}")
                st.write(f"üìû SDT: {Phone}")
 
        col1,col2 = st.columns(2)
        with col1:
            st.header("L·ªãch h·∫πn s·∫Øp t·ªõi üì•")
            conn = sqlite3.connect("chroma.db")
            cursor = conn.cursor()

            ##connect history_logs 
            data = cursor.execute("SELECT * FROM history_logs")
            result = cursor.fetchall()
            df = pd.DataFrame(result, columns = ['ID','Email'])
            n = len(df['ID'])
            PatientID = df['ID'][n-1]
                
            #connect appointment
            data = cursor.execute("SELECT * FROM appointment")
            result = cursor.fetchall()
            df = pd.DataFrame(result, columns= ['ID', 'DoctorID','PatientID','DATE','Description'])
            loc = df.loc[df['PatientID']==PatientID,['ID','DoctorID','DATE','Description']]
            doctorID = loc['DoctorID']
            n_appoinment = len(doctorID)
            #connect doctor
            data = cursor.execute("SELECT * FROM doctor")
            result = cursor.fetchall()
            df = pd.DataFrame(result, columns=['ID','Name','Speciality'])
            n = len(doctorID)
            if n_appoinment ==0:
                st.warning("B·∫°n hi·ªán t·∫°i kh√¥ng c√≥ l·ªãch h·∫πn n√†o")
            else:
                if n==1:
                    doctorID = int(doctorID)
                    loc2 = df.loc[df['ID']==doctorID,['ID','Name','Speciality']]
                
                if n>1:
                    for id in doctorID:
                        loc2 = df.loc[df['ID']==int(id),['ID','Name','Speciality']]

                loc['DoctorName'] = [name for name in loc2['Name']]

                #sap xep lai thu tu cac cot
                new_order = ['ID', 'DoctorID', 'DoctorName','DATE','Description']
                loc_reindex = loc.reindex(columns=new_order)
                loc_reindex = loc_reindex.drop(columns=['DoctorID'])
                st.dataframe(loc_reindex,width=600, height=100)

        with col2:
            st.header("Thay ƒë·ªïi l·ªãch h·∫πn üìù")
            if 'my_option' not in st.session_state:
                st.session_state.my_option = ""
               
            st.session_state.my_option = st.selectbox(
                        "Options:", 
                        ("Thay ƒë·ªïi l·ªãch h·∫πn", "H·ªßy h·∫πn"), 
                        index=["Thay ƒë·ªïi l·ªãch h·∫πn", "H·ªßy h·∫πn"].index(st.session_state.my_option) if st.session_state.my_option else 0,
                        key='selectbox')
            
            # Hi·ªÉn th·ªã gi√° tr·ªã c·ªßa `selectbox` ƒë∆∞·ª£c l∆∞u tr·ªØ trong `session_state`
           
            if st.session_state.my_option == "Thay ƒë·ªïi l·ªãch h·∫πn":
                option_day = st.date_input("Ch·ªçn ng√†y")
                option = st.selectbox("Ch·ªçn th·ªùi gian:", ["9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM"])
                submit = st.button("Submit")
               
                if submit:

                    #chuyen doi ngay
                    time = option_day.strftime('%A, %B %d, %Y')
                    day = datetime.datetime.strptime(time, '%A, %B %d, %Y').date()

                    #chuyen doi gio
                    time_object = datetime.datetime.strptime(option, '%I:%M %p').time()
                    combine = datetime.datetime.combine(day, time_object)

                    #connect table appointment
                    data = cursor.execute("SELECT * FROM appointment")
                    result = cursor.fetchall()
                    df = pd.DataFrame(result, columns = ['ID','DoctorID','PatientID','DATE','Description'])
                    loc = df.loc[df['PatientID']==PatientID,['DATE']]
                    #lay datetime trong table
                    date = loc['DATE'][0]
                    result = datetime.datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
                   
                    if result == combine:
                        st.warning("Th·ªùi gian thay ƒë·ªïi gi·ªëng v·ªõi th·ªùi gian c≈©. H√£y ch·ªçn l·∫°i !!")
                    else:
                        st.success("Thay ƒë·ªïi l·ªãch h·∫πn th√†nh c√¥ng")
                        update_appoinment2(PatientID,combine)

            if st.session_state.my_option == "H·ªßy h·∫πn":
                submit = st.button("Submit")
                if submit:
                    st.success("H·ªßy h·∫πn th√†nh c√¥ng")
                    data = cursor.execute("SELECT * FROM appointment")
                    result = cursor.fetchall()
                    df = pd.DataFrame(result, columns = ['ID','DoctorID','PatientID','DATE','Description'])
                    loc = df.loc[df['PatientID']==PatientID,['DATE']]

                    #lay datetime trong table
                    date = loc['DATE'][0]
                    cancel_appointment(PatientID, date)
            
    else:
        st.warning("Please update information")
    
elif page2 =="Appointment":
    conn = connect_sql()
    cursor = conn.cursor()
    data = cursor.execute('SELECT * FROM history_logs')
    result = cursor.fetchall()
    df = pd.DataFrame(result, columns = ['ID','Email'])
    n = len(df['ID'])
    PatientID = df['ID'][n-1]

    appointment(PatientID)

elif page2 =="Search":
    search_drugs()

st.sidebar.header("Login")
st.sidebar.write("Chat tr·ª±c ti·∫øp v·ªõi Doctor AI")
st.sidebar.header("Chat")
st.sidebar.header("Search")
st.sidebar.header("Appointment")
